from typing import Dict

from resources.lib.controller.basecontroller import BaseController
from resources.lib.core.corefunctions import Core
from resources.lib.manager.inputmanager import InputManager
from resources.lib.model.inputdevice import InputDevice
from resources.lib.util.devicewrapper import DeviceWrapper
from resources.lib.util.moonlighthelper import MoonlightHelper
from resources.lib.views.selectinput import SelectInput
from xbmcgui import DialogProgress


class ControllerConfigurationController(BaseController):
    core = ... # type: Core
    device_wrapper = ... # type: DeviceWrapper
    input_manager = ... # type: InputManager
    moonlight_helper = ... # type: MoonlightHelper
    window = ... # type: SelectInput
    def __init__(self, core: Core, device_wrapper: DeviceWrapper, input_manager: InputManager, moonlight_helper: MoonlightHelper): ...
    def select_action(self) -> None: ...
    def get_active_skin(self) -> str: ...
    def get_string(self, string_id: str) -> str: ...
    def get_input_devices(self) -> Dict[InputDevice]: ...
    def add_input_device(self, ctrl_id: str, device: InputDevice) -> None: ...
    def remove_input_device(self, ctrl_id: str) -> None: ...
    def update_input_device(self, ctrl_id: str, device: InputDevice) -> None: ...
    def find_device_by_name(self, name) -> InputDevice: ...
    def create_mapping_for_device(self, device: InputDevice, file_path: str, dialog: DialogProgress) -> bool: ...
